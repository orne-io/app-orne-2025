"use strict";(self.webpackChunkorne_dapp=self.webpackChunkorne_dapp||[]).push([[7055],{97055:(e,a,t)=>{t.d(a,{offchainLookup:()=>k,offchainLookupSignature:()=>w});var s=t(29665),r=t(23512),n=t(21627),o=t(91218);class c extends n.C{constructor(e){let{callbackSelector:a,cause:t,data:s,extraData:r,sender:n,urls:c}=e;super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],t.metaMessages?.length?"":[],"Offchain Gateway Call:",c&&["  Gateway URL(s):",...c.map(e=>`    ${(0,o.I)(e)}`)],`  Sender: ${n}`,`  Data: ${s}`,`  Callback selector: ${a}`,`  Extra data: ${r}`].flat(),name:"OffchainLookupError"})}}class d extends n.C{constructor(e){let{result:a,url:t}=e;super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,o.I)(t)}`,`Response: ${(0,r.A)(a)}`],name:"OffchainLookupResponseMalformedError"})}}class l extends n.C{constructor(e){let{sender:a,to:t}=e;super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${a}`],name:"OffchainLookupSenderMismatchError"})}}var u=t(72494),i=t(74745),p=t(31376),f=t(6816),h=t(52620),y=t(31499),m=t(50707);const w="0x556f1830",b={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function k(e,a){let{blockNumber:t,blockTag:r,data:n,to:o}=a;const{args:d}=(0,i.W)({data:n,abi:[b]}),[u,y,w,k,C]=d,{ccipRead:x}=e,O=x&&"function"===typeof x?.request?x.request:g;try{if(!(0,f.h)(o,u))throw new l({sender:u,to:o});const a=y.includes(m.J)?await(0,m.X)({data:w,ccipRequest:O}):await O({data:w,sender:u,urls:y}),{data:n}=await(0,s.T)(e,{blockNumber:t,blockTag:r,data:(0,h.xW)([k,(0,p.h)([{type:"bytes"},{type:"bytes"}],[a,C])]),to:o});return n}catch(L){throw new c({callbackSelector:k,cause:L,data:n,extraData:C,sender:u,urls:y})}}async function g(e){let{data:a,sender:t,urls:s}=e,n=new Error("An unknown error occurred.");for(let c=0;c<s.length;c++){const e=s[c],l=e.includes("{data}")?"GET":"POST",i="POST"===l?{data:a,sender:t}:void 0,p="POST"===l?{"Content-Type":"application/json"}:{};try{const s=await fetch(e.replace("{sender}",t.toLowerCase()).replace("{data}",a),{body:JSON.stringify(i),headers:p,method:l});let o;if(o=s.headers.get("Content-Type")?.startsWith("application/json")?(await s.json()).data:await s.text(),!s.ok){n=new u.Ci({body:i,details:o?.error?(0,r.A)(o.error):s.statusText,headers:s.headers,status:s.status,url:e});continue}if(!(0,y.q)(o)){n=new d({result:o,url:e});continue}return o}catch(o){n=new u.Ci({body:i,details:o.message,url:e})}}throw n}}}]);
//# sourceMappingURL=7055.391bb6e2.chunk.js.map